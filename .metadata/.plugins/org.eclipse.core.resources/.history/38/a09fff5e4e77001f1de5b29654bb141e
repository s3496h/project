package com.example.demo.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.example.demo.service.ReviewService;
import com.example.demo.vo.ResultData;
import com.example.demo.vo.Review;
import com.example.demo.vo.Member;

import java.util.List;

@Controller
@RequestMapping("/reviews")
public class ReviewController {

    @Autowired
    private ReviewService reviewService;

    private static final int REVIEWS_PER_PAGE = 10; // 페이지당 표시할 리뷰 수

    // Fetch reviews for a specific product with pagination
    @GetMapping("/{productId}")
    public String getReviews(@PathVariable int productId, 
                             @RequestParam(defaultValue = "1") int page, // 기본 페이지는 1
                             Model model) {
        // 총 리뷰 개수 가져오기
        int totalReviews = reviewService.getTotalReviewCountByProductId(productId);
        int totalPages = (int) Math.ceil((double) totalReviews / REVIEWS_PER_PAGE);

        // 페이지네이션된 리뷰 리스트 가져오기
        ResultData<List<Review>> result = reviewService.getReviewsByProductIdWithPagination(productId, page, REVIEWS_PER_PAGE);

        if (result.isFail()) {
            model.addAttribute("errorMessage", result.getMsg());
        } else {
            model.addAttribute("reviews", result.getData1());
        }

        // 페이지 관련 정보 전달
        model.addAttribute("productId", productId);
        model.addAttribute("currentPage", page);
        model.addAttribute("totalPages", totalPages);

        return "product/detail"; // Return the view name for the product details page
    }

    @PostMapping("/add")
    public String addReview(@RequestParam Integer productId, // Ensure productId is present
                             @RequestParam String userName,  // 로그인 ID
                             @RequestParam String writerNickname,  // 작성자의 닉네임
                             @RequestParam String content,
                             @RequestParam(required = false) Integer rating,
                             RedirectAttributes redirectAttributes) {
        // Debugging: Log received parameters
        System.out.println("Received productId: " + productId);
        System.out.println("userName: " + userName); // 로그인 ID
        System.out.println("writerNickname: " + writerNickname); // 닉네임
        System.out.println("content: " + content);
        System.out.println("rating: " + rating);

        // Validate productId presence
        if (productId == null) {
            redirectAttributes.addFlashAttribute("error", "productId가 누락되었습니다.");
            return "redirect:/product/article/detail"; // Redirect to an appropriate page
        }

        // Validate rating
        if (rating == null || rating < 1 || rating > 5) {
            redirectAttributes.addFlashAttribute("error", "유효한 별점을 선택하세요.");
            return "redirect:/product/article/detail?id=" + productId; // Redirect to product detail page
        }

        // Add the review
        ResultData<String> result = reviewService.addReview(productId, userName, content, rating, writerNickname);

        // Handle result of review addition
        if (result.isFail()) {
            redirectAttributes.addFlashAttribute("error", result.getMsg());
        } else {
            redirectAttributes.addFlashAttribute("success", "리뷰가 추가되었습니다.");
        }

        // Redirect to the product detail page with productId
        return "redirect:/product/article/detail?id=" + productId; // Redirect to product detail page
    }
}